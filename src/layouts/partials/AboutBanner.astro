---
import AnimatedCircles from "@/components/AnimatedCircles.astro";
import type { AboutBanner } from "@/types";
import ImageMod from "@/components/ImageMod.astro";
import { markdownify } from "@/lib/utils/textConverter";
import { getEntry } from "astro:content";

const { banner }: { banner: AboutBanner } = (await getEntry("about", "-index"))
  .data;
---

{
  banner && banner.enable && (
    <section class="relative overflow-hidden isolate pt-16">
      <div class="container">
        <div class="row items-center">
          {banner.image && (
            <div class="md:col-5 hidden md:block -z-10" data-aos="zoom-out-sm">
              <ImageMod
                src={banner.image}
                class="w-1/2 md:w-auto mx-auto relative z-20"
                alt="dedicated team"
              />
            </div>
          )}
          <div class="md:col-7 text-center md:text-left">
            {banner.title && (
              <h1
                class="mb-4 lg:mb-6 xl:col-11"
                data-aos="fade-right-sm"
                set:html={markdownify(banner.title)}
              />
            )}

            {banner.description && (
              <p
                class="mb-8"
                data-aos="fade-right-sm"
                data-aos-delay="100"
                set:html={markdownify(banner.description)}
              />
            )}
            {banner.buttons && (
              <div
                class="space-x-4"
                data-aos="fade-right-sm"
                data-aos-delay="200">
                {banner.buttons.map((btn, index) => (
                  <a
                    href={btn.link}
                    class={
                      index === 0
                        ? "btn btn-primary"
                        : "btn btn-outline-primary"
                    }
                    set:html={markdownify(btn.label)}
                  />
                ))}
              </div>
            )}
          </div>
        </div>
        {banner.statistics && (
          <div class="flex justify-center text-center flex-col md:flex-row mt-20 xl:mt-28 gap-y-5 w-2/3 mx-auto">
            {banner.statistics.map((stat, index) => (
              <div
                class={`text-dark ${index === banner.statistics.length - 1 ? "" : "md:border-r border-b md:border-b-0 md:pr-12 pb-4 lg:pb-0 last:pb-0 md:mr-12"}`}
                data-aos="fade-up-sm"
                data-aos-delay={index * 100}>
                <span class="text-h4 lg:text-h3 xl:text-h1 font-extrabold leading-none">
                  {stat.title}
                </span>
                <p
                  class="mt-2 font-normal"
                  set:html={markdownify(stat.description)}
                />
              </div>
            ))}
          </div>
        )}
      </div>

      <div class="absolute inset-0 hidden lg:block overflow-hidden -z-10">
        <div
          class="absolute top-1/3 -translate-x-1/2 left-0 md:scale-75 2xl:scale-100"
          data-aos="fade-in">
          <AnimatedCircles />
        </div>
        <div class="absolute bottom-10 right-0 scale-50 2xl:scale-100 translate-x-1/2">
          <img
            src="/images/shapes/bottom-left-triangles.png"
            alt="Shape"
            data-aos="fade-in"
          />
        </div>
      </div>
    </section>
  )
}
